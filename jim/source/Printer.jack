/**
 * Prints single characters. Largely copied from Output.jack.
 * This file exists because Output.jack has its own cursor logic that is incompatible with
 * how we'd like to use vim.
 */
class Printer {

  // Character map for displaying characters
  static Array charMaps; 

  // width of a char
  static int width;

  // height of a char
  static int height;

  // Initializes the character map array
  function void init() {
    var int i;
    let width = 8;
    let height = 11;
    let charMaps = Array.new(127);
    
    // Black square, used for displaying non-printable characters.
    do Printer.create(0,63,63,63,63,63,63,63,63,63,0,0);

    // Assigns the bitmap for each character in the charachter set.
    // The first parameter is the character index, the next 11 numbers
    // are the values of each row in the frame that represents this character.
    do Printer.create(32,0,0,0,0,0,0,0,0,0,0,0);          //
    do Printer.create(33,12,30,30,30,12,12,0,12,12,0,0);  // !
    do Printer.create(34,54,54,20,0,0,0,0,0,0,0,0);       // "
    do Printer.create(35,0,18,18,63,18,18,63,18,18,0,0);  // #
    do Printer.create(36,12,30,51,3,30,48,51,30,12,12,0); // $
    do Printer.create(37,0,0,35,51,24,12,6,51,49,0,0);    // %
    do Printer.create(38,12,30,30,12,54,27,27,27,54,0,0); // &
    do Printer.create(39,12,12,6,0,0,0,0,0,0,0,0);        // '
    do Printer.create(40,24,12,6,6,6,6,6,12,24,0,0);      // (
    do Printer.create(41,6,12,24,24,24,24,24,12,6,0,0);   // )
    do Printer.create(42,0,0,0,51,30,63,30,51,0,0,0);     // *
    do Printer.create(43,0,0,0,12,12,63,12,12,0,0,0);     // +
    do Printer.create(44,0,0,0,0,0,0,0,12,12,6,0);        // ,
    do Printer.create(45,0,0,0,0,0,63,0,0,0,0,0);         // -
    do Printer.create(46,0,0,0,0,0,0,0,12,12,0,0);        // .    
    do Printer.create(47,0,0,32,48,24,12,6,3,1,0,0);      // /
    
    do Printer.create(48,12,30,51,51,51,51,51,30,12,0,0); // 0
    do Printer.create(49,12,14,15,12,12,12,12,12,63,0,0); // 1
    do Printer.create(50,30,51,48,24,12,6,3,51,63,0,0);   // 2
    do Printer.create(51,30,51,48,48,28,48,48,51,30,0,0); // 3
    do Printer.create(52,16,24,28,26,25,63,24,24,60,0,0); // 4
    do Printer.create(53,63,3,3,31,48,48,48,51,30,0,0);   // 5
    do Printer.create(54,28,6,3,3,31,51,51,51,30,0,0);    // 6
    do Printer.create(55,63,49,48,48,24,12,12,12,12,0,0); // 7
    do Printer.create(56,30,51,51,51,30,51,51,51,30,0,0); // 8
    do Printer.create(57,30,51,51,51,62,48,48,24,14,0,0); // 9
    
    do Printer.create(58,0,0,12,12,0,0,12,12,0,0,0);      // :
    do Printer.create(59,0,0,12,12,0,0,12,12,6,0,0);      // ;
    do Printer.create(60,0,0,24,12,6,3,6,12,24,0,0);      // <
    do Printer.create(61,0,0,0,63,0,0,63,0,0,0,0);        // =
    do Printer.create(62,0,0,3,6,12,24,12,6,3,0,0);       // >
    do Printer.create(64,30,51,51,59,59,59,27,3,30,0,0);  // @
    do Printer.create(63,30,51,51,24,12,12,0,12,12,0,0);  // ?

    do Printer.create(65,12,30,51,51,63,51,51,51,51,0,0); // A
    do Printer.create(66,31,51,51,51,31,51,51,51,31,0,0); // B
    do Printer.create(67,28,54,35,3,3,3,35,54,28,0,0);    // C
    do Printer.create(68,15,27,51,51,51,51,51,27,15,0,0); // D
    do Printer.create(69,63,51,35,11,15,11,35,51,63,0,0); // E
    do Printer.create(70,63,51,35,11,15,11,3,3,3,0,0);    // F
    do Printer.create(71,28,54,35,3,59,51,51,54,44,0,0);  // G
    do Printer.create(72,51,51,51,51,63,51,51,51,51,0,0); // H
    do Printer.create(73,30,12,12,12,12,12,12,12,30,0,0); // I
    do Printer.create(74,60,24,24,24,24,24,27,27,14,0,0); // J
    do Printer.create(75,51,51,51,27,15,27,51,51,51,0,0); // K
    do Printer.create(76,3,3,3,3,3,3,35,51,63,0,0);       // L
    do Printer.create(77,33,51,63,63,51,51,51,51,51,0,0); // M
    do Printer.create(78,51,51,55,55,63,59,59,51,51,0,0); // N
    do Printer.create(79,30,51,51,51,51,51,51,51,30,0,0); // O
    do Printer.create(80,31,51,51,51,31,3,3,3,3,0,0);     // P
    do Printer.create(81,30,51,51,51,51,51,63,59,30,48,0);// Q
    do Printer.create(82,31,51,51,51,31,27,51,51,51,0,0); // R
    do Printer.create(83,30,51,51,6,28,48,51,51,30,0,0);  // S
    do Printer.create(84,63,63,45,12,12,12,12,12,30,0,0); // T
    do Printer.create(85,51,51,51,51,51,51,51,51,30,0,0); // U
    do Printer.create(86,51,51,51,51,51,30,30,12,12,0,0); // V
    do Printer.create(87,51,51,51,51,51,63,63,63,18,0,0); // W
    do Printer.create(88,51,51,30,30,12,30,30,51,51,0,0); // X
    do Printer.create(89,51,51,51,51,30,12,12,12,30,0,0); // Y
    do Printer.create(90,63,51,49,24,12,6,35,51,63,0,0);  // Z

    do Printer.create(91,30,6,6,6,6,6,6,6,30,0,0);          // [
    do Printer.create(92,0,0,1,3,6,12,24,48,32,0,0);        // \
    do Printer.create(93,30,24,24,24,24,24,24,24,30,0,0);   // ]
    do Printer.create(94,8,28,54,0,0,0,0,0,0,0,0);          // ^
    do Printer.create(95,0,0,0,0,0,0,0,0,0,63,0);           // _
    do Printer.create(96,6,12,24,0,0,0,0,0,0,0,0);          // `

    do Printer.create(97,0,0,0,14,24,30,27,27,54,0,0);      // a
    do Printer.create(98,3,3,3,15,27,51,51,51,30,0,0);      // b
    do Printer.create(99,0,0,0,30,51,3,3,51,30,0,0);        // c
    do Printer.create(100,48,48,48,60,54,51,51,51,30,0,0);  // d
    do Printer.create(101,0,0,0,30,51,63,3,51,30,0,0);      // e
    do Printer.create(102,28,54,38,6,15,6,6,6,15,0,0);      // f
    do Printer.create(103,0,0,30,51,51,51,62,48,51,30,0);   // g
    do Printer.create(104,3,3,3,27,55,51,51,51,51,0,0);     // h
    do Printer.create(105,12,12,0,14,12,12,12,12,30,0,0);   // i
    do Printer.create(106,48,48,0,56,48,48,48,48,51,30,0);  // j
    do Printer.create(107,3,3,3,51,27,15,15,27,51,0,0);     // k
    do Printer.create(108,14,12,12,12,12,12,12,12,30,0,0);  // l
    do Printer.create(109,0,0,0,29,63,43,43,43,43,0,0);     // m
    do Printer.create(110,0,0,0,29,51,51,51,51,51,0,0);     // n
    do Printer.create(111,0,0,0,30,51,51,51,51,30,0,0);     // o
    do Printer.create(112,0,0,0,30,51,51,51,31,3,3,0);      // p
    do Printer.create(113,0,0,0,30,51,51,51,62,48,48,0);    // q
    do Printer.create(114,0,0,0,29,55,51,3,3,7,0,0);        // r
    do Printer.create(115,0,0,0,30,51,6,24,51,30,0,0);      // s
    do Printer.create(116,4,6,6,15,6,6,6,54,28,0,0);        // t
    do Printer.create(117,0,0,0,27,27,27,27,27,54,0,0);     // u
    do Printer.create(118,0,0,0,51,51,51,51,30,12,0,0);     // v
    do Printer.create(119,0,0,0,51,51,51,63,63,18,0,0);     // w
    do Printer.create(120,0,0,0,51,30,12,12,30,51,0,0);     // x
    do Printer.create(121,0,0,0,51,51,51,62,48,24,15,0);    // y
    do Printer.create(122,0,0,0,63,27,12,6,51,63,0,0);      // z
    
    do Printer.create(123,56,12,12,12,7,12,12,12,56,0,0);   // {
    do Printer.create(124,12,12,12,12,12,12,12,12,12,0,0);  // |
    do Printer.create(125,7,12,12,12,56,12,12,12,7,0,0);    // }
    do Printer.create(126,38,45,25,0,0,0,0,0,0,0,0);        // ~

    return;
  }

  // Creates the character map array of the given character index, using the given values.
  function void create(int index, int a, int b, int c, int d, int e,
                        int f, int g, int h, int i, int j, int k) {
    var Array map;

    let map = Array.new(11);
    let charMaps[index] = map;

    let map[0] = a;
    let map[1] = b;
    let map[2] = c;
    let map[3] = d;
    let map[4] = e;
    let map[5] = f;
    let map[6] = g;
    let map[7] = h;
    let map[8] = i;
    let map[9] = j;
    let map[10] = k;

    return;
  }
  
  // Returns the character map (array of size 11) of the given character.
  // If the given character is invalid or non-printable, returns the
  // character map of a black square.
  function Array getMap(char c) {
    if ((c < 32) | (c > 126)) {
      let c = 0;
    }
    return charMaps[c];
  }

  /**
   * Prints a char at cursor position X and Y.
   * We can fit 64 chars per line, and 23 lines total on the screen.
   * x: must be between 0 and 64
   * y: must be between 0 and 23
   */
  function void print (char c, Cursor cursor) {
    var int i;
    var Array sprite;
    var int addr;
    let sprite = Printer.getMap(c);
    let i = 0;
    while (i < 11) {
      // 32 bytes per row.
      let addr = 16384 + cursor.x() + (cursor.y() * 32 * height) + (i * 32);
      do Memory.poke(addr, sprite[i]);
      let i = i + 1;
    }
    return;
  }

  /**
   * Renders the cursor. It will invert whatever pixels it's hovering over.
   */
  function void renderCursor (Cursor cursor) {
    var int i, addr, addrVal;
    let i = 0;
    while (i < 11) {
      let addr = 16384 + cursor.x() + (cursor.y() * 32 * height) + (i * 32);
      let addrVal = Memory.peek(addr);
      do Memory.poke(addr, ~addrVal);
      let i = i + 1;
    }
    return;
  }
}